What have I got in my pocket?
A collection of utilities of varying utility.
Intended for use with Cinder 0.8.5.
Written against clang/C++11.

These bits of software are written as a library; each piece should stand
on its own as something generally useful. Eventually, I may try to turn
it into more of a framework on top of Cinder along the lines of PolyCode.

Current Contents:
Sprites
- image packing for making sprite sheets
- sprite rendering from sheets
- sprite animation
Basic Renderers
- SimpleRenderer naively calls render() on all elements
- Renderer2d supports batch renderers
	- Renderer2dStrip
	- Renderer2dStripVbo
	- TODO: all 2d elements implement the interface for fast rendering
- TODO: Renderer3d
Message Passing / Event Passing Library
- Messenger/Receiver pattern allows for decoupled information passing
- Messenger<T> passes arbitrary message types with compile-time type safety
- Receiver<T> allows you to listen for different events with different handlers
Line Utilities
- curve through a collection of points
- path expansion to geometry on CPU
Color Palette
- color selection from an image
Animation Utilities
- lerp function for quaternions, colors, wrapped numbers
File Utilities
- Get next sequential filename

In Progress:
Scene Graph
- 2D graph for overlay-style gui development

Longer term:
Scripting helpers
Console input (for e.g. scripting layer)

Conventions:

For the creation of smart pointers, we use the following typedefs:
std::shared_ptr<class Type>	TypeRef;
std::unique_ptr<class Type> TypeUniqueRef;
Factory ::create() methods return TypeUniqueRef
You can easily get a TypeRef at creation if that's what you want
TypeRef t = Type::create(); // compiler will make a shared_ptr w/o explicit call to move()
auto t = Type::create(); // yields a unique_ptr
